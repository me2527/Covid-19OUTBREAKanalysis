# -*- coding: utf-8 -*-
"""CoronaVirus Spread_Project1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zdFyTk94kmKnZaj-PyQXxQYGCHp6HK9T

# Lesson 0: COVID-19 Outbreak Analysis

### Overview

In a tweet on 11 March 2020, WHO declared COVID-19 (or coronavirus) a pandemic. A pandemic is a disease spread over the world.

<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/who-coronavirus-pandemic.png' width=600>

Here's a link to the tweet: https://twitter.com/WHO/status/1237777021742338049

Coronavirus has claimed lives of more than **16,000** people globally so far and still counting. You can look at the live dashboard to see the real-time updates.

[COVID-19 Live Dashboard](https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6)

In line with this pandemic and as a coronavirus awareness initiative at WhiteHat Jr, in this class, we are going to look at 

- How many people get affected with coronavirus every day

- Distribution of the number of people affected across the globe

To understand the virality of the disease.

---

### What Will You Create In This Class?

- Cartograms using Folium Maps 

- Line Plots

---

### Teacher-Student Activities

Now, let's create the required line plots and cartograms. Here's the list of activities that we are going to perform in this class:

1. Download the required data

2. Locate the datasets in the notebook

3. Import the required modules

4. Create DataFrames

5. Create a series

6. Create line plots/charts

7. Create maps

---

#### Activity 1: Download The Data

Here's the link to the data source. It is a GitHub repository. Coders/programmers across the world create GitHub repositories for their codes so that they can download and upload their work anytime from anywhere. Essentially, it's like carrying data in a portable storage device.

[COVID-19 Data Source](https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series)


<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/github-covid19-repo.png'>
"""

# Student Action: Run the code below by either clicking on the play button or by hitting the 'shift + enter' keys together.
# Cloning the GitHub repository.
!git clone https://github.com/CSSEGISandData/COVID-19.git

"""The repository is saved in the notebook. You can click on the folder icon on the left-hand side of the notebook to access the `COVID-19` repository (or folder)

---

#### Activity 2: Dataset Paths

To get the path of the datasets:

1. Click on the folder icon on the left-hand side of the notebook.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/get_data_1.png' width=700>

2. Click on the tiny arrow on the left-hand side of the `COVID-19` folder.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/get_data_2.png' width=400>

3. Click on the tiny arrow in the left-hand side of the `csse_covid_19_data` folder.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/get_data_3.png' width=400>

4. Click on the tiny arrow in the left-hand side of the `csse_covid_19_time_series` folder.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/get_data_4.png' width=400>

   You should be able to see the CSV files which contain data for this class.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/get_data_5.png' width=400>

5. Right-click on each of the CSV files and then click on the **Copy path** option. The path of the file will get copied.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/get_data_6.png' width=500>

6. You can now paste the link either in a code cell or in a text cell.

**Note:**

The files below will no longer be updated:

1. `time_series_19-covid-Confirmed.csv`

2. `time_series_19-covid-Deaths.csv`

3. `time_series_19-covid-Recovered.csv`

Hence, refer to the following two files for the latest time series data:

1. `time_series_covid19_confirmed_global.csv` and 

2. `time_series_covid19_deaths_global.csv`
"""

# Student Action: Run the code below.
# Storing the path of 'time_series_19-covid-Confirmed.csv' in 'conf_csv' variable.
conf_csv = '/content/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'

"""This data gets updated every day. Today it has data till yesterday. Tomorrow, it will contain data for this day as well.

---

#### Activity 3: Importing Modules

To perform different kinds of tasks, we can use different modules in Python.
"""

# Commented out IPython magic to ensure Python compatibility.
# Student Action: Run the code below.
import numpy as np # Linear algebra
import pandas as pd # Data processing 

import matplotlib.pyplot as plt # Data visualisation
import seaborn as sns # Data visualisation

import folium # Cartograms / maps
# %matplotlib inline

"""---

#### Activity 4: Create DataFrame

Let's create three different DataFrames for the total confirmed coronavirus cases across the globe. A DataFrame is a tabular representation of data containing many rows and columns.
"""

# Student Action: Run the code below.
# DataFrame for the total confirmed cases.
conf_df = pd.read_csv(conf_csv)
# Display the first five rows of the 'conf_df' DataFrame.
conf_df.head()

"""As you can see, we have data for the total confirmed cases of coronavirus reported till yesterday across the globe.

Let's find out how many rows and columns are there in the `conf_df` DataFrame.
"""

# Student Action: Run the code below.
# Number of rows and columns in the 'conf_df' DataFrame.
conf_df.shape

"""Now, let's create a series of the total confirmed cases of coronavirus reported

- Across globe

- In China

- Outside China
"""

# Student Action: Run the code below.
# Total confirmed cases reported across the globe.
total_cases = conf_df.iloc[:, 4:].apply(sum, axis=0)
# Display the first 10 entries in the 'total_cases' series.
total_cases[:10]

# Student Action: Run the code below.
# Total confirmed cases in China.
china_cases = conf_df[conf_df['Country/Region'] == 'China'].iloc[:, 4:].apply(sum, axis=0)
# Display the first 10 entries of the 'china_cases' series.
china_cases[:10]

# Student Action: Run the code below.
# Total confirmed cases outside China.
non_china_cases = conf_df[conf_df['Country/Region'] != 'China'].iloc[:, 4:].apply(sum, axis=0)
# Display the first 10 entries of the 'non_china_cases' series.
non_china_cases[:12]

"""---

#### Activity 5: Getting Dates

Get the dates from the `conf_df` DataFrame.
"""

# Student Action: Run the code below.
# Getting the dates from the 'conf_df' DataFrame.
dates = pd.Series(conf_df.columns[4:].values)
# Display the first 10 entries of the 'dates' series.
dates[:10]

"""---

#### Activity 6: Converting Dates From Text To `datetime[ns]` Python Objects

Python reads above dates as a text. We need Python to read the dates as actual dates, not as texts. Hence, we need to convert the dates from text to `datetime` Python object.
"""

# Student Action: Run the code below.
# Converting the dates from text to the 'datetime' values.
dates = pd.to_datetime(dates)
dates[:10]

"""---

#### Activity 7: Formatting Dates In `Month Day` Format

Currently, the dates are formatted as `YYYY-MM-DD` where 

- `YYYY` denotes the numeric value of a year in four-digits

- `MM` denotes the numeric value of a month in two-digits

- `DD` denotes the numeric value of a day in two-digits

Let's convert the dates to the `Month Day` (e.g., `March 12`) format to make them more readable. We already know that the data is gathered for the year 2020. Hence, we don't need to include the year value in the dates.
"""

# Student Action: Run the code below.
# User-defined function to format date in the 'Month Day, Year' format.
def date_conversion(dates):
  dates_conv = []
  for date in dates:
    dates_conv.append(date.strftime('%b %d')) # date.strftime('%b %d, %Y')
  return dates_conv

dates_conv = date_conversion(dates)
dates_conv[:10]

"""The above dates are still Python objects even though they appear as texts.

---

#### Activity 8: Line Plots^^

Now, we will create line plots for the total number of confirmed cases reported 

- across world

- in China

- outside China
"""

# Student Action: Run the code below.
# Line plot for the total number of coronavirus confirmed cases reported across the world.
plt.figure(figsize=(20, 6))
plt.plot(dates_conv, total_cases.values, '^-')
plt.xticks(dates_conv, rotation=45)
plt.title('Total Coronavirus Cases Reported Across World')
plt.grid(True)
plt.show()

# Student Action: Run the code below.
# Line plot for the total number of coronavirus confirmed cases reported in China only.
plt.figure(figsize=(20, 6))
plt.plot(dates_conv, china_cases.values, 'o-')
plt.xticks(dates_conv, rotation=45)
plt.title('Total Coronavirus Cases Reported in China')
plt.grid(True)
plt.show()

"""The curve flattens after 23 February 2020 because Wuhan was put under total lockdown (people were isolated and were prohibited from gathering in public places) on 23 January 2020. As a result, the spread of the virus slowed down significantly."""

# Student Action: Run the code below.
# Line plot for the total number of coronavirus confirmed cases reported outside world.
plt.figure(figsize=(20, 6))
plt.plot(dates_conv, non_china_cases.values, '*-')
plt.xticks(dates_conv, rotation=45)
plt.title('Total Coronavirus Cases Reported Outside China')
plt.grid(True)
plt.show()

# Student Action: Run the code below.
# Line plot to compare the total number of coronavirus confirmed cases reported across the world, in China only and outside China.
plt.figure(figsize=(20, 6))
plt.plot(dates_conv, total_cases.values, '^-', label='Across Globe')
plt.plot(dates_conv, china_cases.values, 'o-', label='In China')
plt.plot(dates_conv, non_china_cases.values, '*-', label='Outside China')
plt.xticks(dates_conv, rotation=45)
plt.title('Coronavirus Cases Reported: World, China & Outside China')
plt.grid(True)
plt.legend()
plt.show()

"""- The blue curve represents the total number of coronavirus cases reported in the world.

- The orange curve represents the total number of coronavirus cases reported in China.

- The green curve represents the total number of coronavirus cases reported outside China.

- On 23 January 2020, Wuhan was put under total lockdown because of which the spread of virus reduced drastically as can be seen from the curve getting flat from 23 February onwards. However, the number of cases reported grew exponentially outside China.

Let's have a look at the top 5 countries with highest total number of confirmed cases.
"""

# Top 5 countries with highest total number of confirmed cases.
grouped_conf_df = conf_df.groupby(by='Country/Region', as_index=False).sum()
high_to_low_conf_df = grouped_conf_df.sort_values(by=conf_df.columns[-1], ascending=False)
highest_conf_regions = high_to_low_conf_df['Country/Region'][:5]

plt.figure(figsize=(20, 6))
for region in highest_conf_regions.values:
  conf_series = high_to_low_conf_df.loc[high_to_low_conf_df['Country/Region'] == region, high_to_low_conf_df.columns[3:]].values[0]
  plt.plot(dates_conv, conf_series, 'o-', label=region)
plt.xticks(rotation=45)
plt.title('Top 5 Countries With Highest Confirmed Cases')
plt.legend()
plt.grid()
plt.show()

"""---

#### Activity 9: Get The Last Column Header
"""

# Student Action: Run the code below.
# Get the last column header.
last_col_header = conf_df.columns[-1]
last_col_header

"""---

#### Activity 10: DataFrame For Confirmed Coronavirus Cases Only In China
"""

conf_china_df = conf_df[conf_df['Country/Region'] == 'China']
conf_china_df.head()

"""---

#### Activity 11: Cartograms (or Maps) For China^

Let's create a cartogram to show the distribution of confirmed coronavirus cases in China and mark the affected regions of China with location markers.

The markers will display the name of the region location along with the number of confirmed coronavirus cases in that region.
"""

# Student Action: Run the code below.
# Map to show the distribution of confirmed coronavirus cases in China (regular markers).
china_map = folium.Map(location=[30.9756, 112.2707], width='100%', height='90%', tiles='Stamen Toner', zoom_start=4.25)
for i in conf_china_df.index:
  folium.Marker(location=[conf_china_df.loc[i, 'Lat'], conf_china_df.loc[i, 'Long']],
                popup= conf_china_df.loc[i, 'Province/State'] + "\n" + str(conf_china_df.loc[i, last_col_header])).add_to(china_map)
china_map

"""Let's create a cartogram to show the distribution of confirmed coronavirus cases in China and mark the affected regions of China with **circular** location markers.

The markers will display the name of the region location along with the number of confirmed coronavirus cases in that region.
"""

# Student Action: Run the code below.
# Map to show the distribution of confirmed coronavirus cases in China (circular markers).
china_map = folium.Map(location=[30.9756, 112.2707], width='100%', height='90%', tiles='Stamen Toner', zoom_start=4.5)
for i in conf_china_df.index:
  folium.Circle(radius=int(conf_china_df.loc[i, last_col_header]) * 2,
                location=[conf_china_df.loc[i, 'Lat'], conf_china_df.loc[i, 'Long']],
                popup= conf_china_df.loc[i, 'Province/State'] + "\n" + str(conf_china_df.loc[i, last_col_header]),
                color='crimson', fill=True, fill_color='crimson').add_to(china_map)
china_map

"""We know for sure that the Hubei region was affected the most in China; almost 50 times the second most affected region. Hence, we the circles for the other regions are very small compared to the circle for the Hubei region.

Let's increase the scale of the radius of the circles to see the variation of people affected in other regions. Also, we will not create a circle for the Hubei region on the map. 
"""

# Student Action: Run the code below.
# Map to show the distribution of confirmed coronavirus cases in China excluding Wuhan (circular markers).
china_map = folium.Map(location=[30.9756, 112.2707], width='100%', height='100%', tiles='Stamen Toner', zoom_start=4.5)
for i in conf_china_df.sort_values(by=last_col_header, ascending=False).index[1:]:
  folium.Circle(radius=int(conf_china_df.loc[i, last_col_header]) * 100,
                location=[conf_china_df.loc[i, 'Lat'], conf_china_df.loc[i, 'Long']],
                popup= conf_china_df.loc[i, 'Province/State'] + "\n" + str(conf_china_df.loc[i, last_col_header]),
                color='crimson', fill=True, fill_color='crimson').add_to(china_map)
china_map

"""As you can see, the number of reported cases of coronavirus are comparable in regions other than Hubei.

---

#### Activity 12: Cartogram (or Maps) For World^^^

Let's create a cartogram to show the distribution of confirmed coronavirus cases across the world and mark the affected regions in the world with **circular** location markers.

The markers will display the name of the region location along with the number of confirmed coronavirus cases in that region.
"""

# Student Action: Run the code below.
# Map to show the distribution of confirmed coronavirus cases across the world (circular markers).
world_map = folium.Map(location=[0, 0], width='100%', height='80%', tiles='Stamen Toner', zoom_start=2.25)
for i in conf_df.index:
  folium.Circle(location=[conf_df.loc[i, 'Lat'], conf_df.loc[i, 'Long']], 
                radius=int(conf_df.loc[i, last_col_header]) * 10, 
                popup=conf_df.loc[i, 'Country/Region'] + '\n' + str(conf_df.loc[i, last_col_header]),
                color='crimson', fill=True, fill_color='crimson').add_to(world_map)
world_map

"""In the same way, we can analyse the situations in other countries also. We have analysed only three cases. They are the total number of coronavirus confirmed cases reported in:

1. World

2. China and 

3. Outside China

We have datasets for the number of people died due to coronavirus and number of people recovered from the virus. We can do a similar analysis on these two datasets.

If you want to look at the trend of the coronavirus outbreak in India, then click on the link provided below.

[Ministry Of Health & Family Welfare](https://www.mohfw.gov.in/)

Fortunately, the data for India suggests that the situation in India is not menacing. However, we must remain vigilant so that the virus doesn't spread at all.

Here are the tips provided by WHO to protect yourself from coronavirus. Do follow them diligently.

[What can people do to protect themselves and others from getting the new coronavirus?](https://www.youtube.com/watch?v=bPITHEiFWLc&feature=emb_title)

---
"""